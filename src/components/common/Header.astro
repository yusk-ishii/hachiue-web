---
import { Image } from 'astro:assets';
import Logo from '@components/common/Lobo.astro';
import IconClose from '@assets/icon_close.svg';
import IconInstagram from '@components/common/IconInstagram.astro';
import IconFacebook from '@components/common/IconFacebook.astro';
const base = import.meta.env.BASE_URL;
const links = [
  { key: 'home', label: 'Home', href: `${base}#` },
  { key: 'about', label: 'About', href: `${base}#about` },
  { key: 'service', label: 'Service', href: `${base}#service` },
  { key: 'shop', label: 'Shop Info', href: `${base}#shop-info` },
  { key: 'contact', label: 'Contact', href: `${base}/contact` },
];
---

<header>
  <h1 class="logo">
    <a href={`${base}#`}>
      <Logo color="currentcolor" />
    </a>
  </h1>
  <button class="nav-open">Menu</button>
  <div class="nav-overlay" hidden></div>
  <nav id="global-nav" class="nav">
    <button class="nav-close" hidden>
      <Image src={IconClose} alt="close" />
    </button>
    <ul class="nav-list">
      {
        links.map((l) => (
          <li class={`nav-item ${l.key}`}>
            <a class="nav-link" href={l.href}>
              {l.label}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="social-icons">
      <a href="https://www.instagram.com/" target="_blank">
        <IconInstagram color="currentcolor" />
      </a>
      <a href="https://www.facebook.com/" target="_blank">
        <IconFacebook color="currentcolor" />
      </a>
    </div>
  </nav>
</header>

<style lang="scss">
  header {
    position: fixed;
    top: 0;
    right: 0;
    left: 0;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    margin: 0 auto;

    @include mq-mobile {
      height: 60px;
      padding: 0 calc(20 / 390 * 100vw);
    }

    @include mq-desktop {
      height: 64px;
      padding: 0 32px;
      mix-blend-mode: exclusion;
    }

    @include mq(1801) {
      max-width: var(--content-width);
      overflow: hidden;
    }
  }

  .logo {
    width: 100px;

    @include mq-desktop {
      color: var(--color-text-light);
    }
  }

  .nav-open {
    @include mq-mobile {
      display: grid;
      place-items: center;
      width: 74px;
      height: 26px;
      font-size: 14px;
      line-height: 1;
      color: var(--color-text-light);
      background-color: var(--color-main);
      border-radius: 999px;
    }

    @include mq-desktop {
      display: none;
    }
  }

  .nav-close {
    @include mq-mobile {
      position: absolute;
      top: 6px;
      right: calc((20 / 390 * 100vw) - 13px);
      z-index: 1;
      display: grid;
      place-items: center;
      width: 48px;
      height: 48px;

      img {
        width: 32px;
        height: 32px;
      }
    }

    @include mq-desktop {
      display: none !important;
    }
  }

  .nav-overlay {
    @include mq-mobile {
      position: fixed;
      inset: 0;
      display: none;
      height: 100dvh;
      background: transparent;
      -webkit-tap-highlight-color: transparent;
    }

    @include mq-desktop {
      display: none !important;
    }
  }

  .nav {
    display: flex;
    color: var(--color-text-light);

    @include mq-mobile {
      position: fixed;
      top: 0;
      right: 0;
      flex-direction: column;
      gap: 48px;
      height: 100dvh;
      padding: 80px calc(20 / 390 * 100vw) 24px;
      background-color: var(--color-main);
      opacity: 0;
      transform: translateX(100%);
      transition:
        transform 0.4s var(--ease-out-cubic),
        opacity 0.3s var(--ease-out-quint);
    }
  }

  .nav-list {
    @include mq-mobile {
      width: 240px;
      text-align: right;
    }

    @include mq-desktop {
      display: flex;
    }
  }

  .nav-item {
    @include mq-mobile {
      & + & {
        margin-top: 16px;
      }
    }

    @include mq-desktop {
      & + & {
        margin-left: 8px;

        &.contact {
          margin-left: 24px;
        }
      }
    }

    @include mq(900) {
      & + & {
        &.contact {
          margin-left: 32px;
        }
      }
    }
  }

  .nav-link {
    @include mq-mobile {
      display: inline-block;
      font-size: 18px;
    }

    @include mq-desktop {
      display: grid;
      place-items: center;
      height: 30px;
      padding: 0 14px;
      font-size: 15px;
      line-height: 1;
      text-wrap: nowrap;
      border: 1px solid var(--color-border);
      border-radius: 999px;
    }

    @include mq(900) {
      padding: 0 24px;
    }
  }

  .social-icons {
    display: flex;

    @include mq-mobile {
      gap: 16px;
      justify-content: flex-end;
      margin-top: 40px;
    }

    @include mq-desktop {
      gap: 16px;
      margin-left: 24px;
    }

    @include mq(900) {
      margin-left: 40px;
    }

    a {
      display: block;

      @include mq-mobile {
        width: 24px;
      }

      @include mq-desktop {
        width: 30px;
      }
    }
  }
</style>

<style lang="scss" is:global>
  // メニュー表示時
  .menu-open {
    header {
      .nav-overlay,
      .nav-overlay[hidden] {
        @include mq-mobile {
          display: block;
        }
      }

      .nav-close,
      .nav-close[hidden] {
        @include mq-mobile {
          display: grid;
        }
      }

      .nav {
        @include mq-mobile {
          display: flex;
          opacity: 1;
          transform: translateX(0);
        }
      }
    }
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);
  const html = document.documentElement;
  const header = document.querySelector('header');
  const navOpenBtn = document.querySelector('.nav-open') as HTMLButtonElement;
  const navCloseBtn = document.querySelector('.nav-close') as HTMLButtonElement;
  const overlay = document.querySelector('.nav-overlay') as HTMLElement;
  const nav = document.querySelector('#global-nav') as HTMLElement;
  const isDesktop = matchMedia('(min-width: 768px)');

  function openMenu() {
    html.classList.add('menu-open');
    overlay.hidden = false;
    navCloseBtn.hidden = false;
    html.style.setProperty('touch-action', 'none');
  }

  function closeMenu() {
    html.classList.remove('menu-open');
    overlay.hidden = true;
    navCloseBtn.hidden = true;
    html.style.removeProperty('touch-action');
  }

  // ボタンクリック
  navOpenBtn.addEventListener('click', (e) => {
    e.preventDefault();
    openMenu();
  });

  navCloseBtn.addEventListener('click', (e) => {
    e.preventDefault();
    closeMenu();
  });

  // オーバーレイで閉じる
  overlay.addEventListener('click', closeMenu);

  // メニュー内リンクをクリックしたら閉じる（#hash内遷移も想定）
  nav.addEventListener('click', (e: Event) => {
    const target = e.target as HTMLElement;
    const a = target.closest('a');
    if (!a) return;
    // 同一ページ内#や通常遷移問わず閉じる
    closeMenu();
  });

  // 画面幅がデスクトップに切り替わったら状態リセット
  isDesktop.addEventListener('change', () => {
    if (isDesktop.matches) closeMenu();
  });

  const showAnim = gsap.fromTo(
    header,
    { y: '0%' },
    { y: '-100%', duration: 0.35, ease: 'sine.inOut', paused: true },
  );

  // スクロール方向検知（rAF + しきい値でチラつき防止）
  let lastY = window.scrollY;
  let ticking = false;
  const THRESHOLD = 2; // px

  function onScrollFrame() {
    const y = window.scrollY;
    const diff = y - lastY;

    // 最上部なら強制的に表示
    if (y <= 50) {
      showAnim.reverse();
      lastY = y;
      ticking = false;
      return;
    }

    // スクロール方向で表示／非表示制御
    if (Math.abs(diff) > THRESHOLD) {
      if (diff > 0) {
        // 下スクロール → 隠す（メニュー開時は除外）
        if (!html.classList.contains('menu-open')) {
          showAnim.play();
        }
      } else {
        // 上スクロール → 表示
        showAnim.reverse();
      }
      lastY = y;
    }

    ticking = false;
  }

  addEventListener(
    'scroll',
    () => {
      if (!ticking) {
        requestAnimationFrame(onScrollFrame);
        ticking = true;
      }
    },
    { passive: true },
  );
</script>

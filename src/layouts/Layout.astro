---
import 'destyle.css';
import '@styles/global.scss';
import 'lenis/dist/lenis.css';
import 'yakuhanjp/dist/css/yakuhanmp.css';
import '@fontsource/zen-kaku-gothic-new/400.css';
import '@fontsource/zen-kaku-gothic-new/500.css';
import '@fontsource-variable/montserrat';
import Header from '@components/common/Header.astro';
import Footer from '@components/common/Footer.astro';

interface Props {
  title?: string;
}

const site = Astro.site;
const base = import.meta.env.BASE_URL;
const url = new URL(base, site).href;
const { title } = Astro.props;
const siteName = 'Hachiue';
const siteDesc = '観葉植物専門店';
const pageTitle = title ? `${title} | ${siteName}` : `${siteName} | ${siteDesc}`;
const description =
  '観葉植物専門店Hachiueの公式サイトです。豊富な品揃えと専門知識で、あなたの生活空間を緑で彩ります。初心者から上級者まで、すべてのお客様に最適なサービスを提供します。';
const pathname = Astro.url.pathname.replace(`${base}/`, '');
---

<html lang="ja">
  <head>
    <meta name="robots" content="noindex" />

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={`${base}/favicon.svg`} />
    <meta name="format-detection" content="telephone=no" />
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:image" content={`${url}/ogp.jpg`} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={`${url}/ogp.jpg`} />
    <meta name="theme-color" content="#01655E" />
  </head>
  <body>
    <Header />
    <div class="wrapper">
      <main>
        <slot />
      </main>
    </div>
    <Footer />
  </body>
</html>

<style lang="scss" is:global>
  img {
    display: block;
    max-width: 100%;
    height: auto;
    vertical-align: middle;
  }
</style>

<style lang="scss">
  :root {
    --black: #1f1f1f;
    --white: #fafafa;
    --gray: #8a8a8a;
    --green: #01655e;
    --light-green: #087d75;
    --deep-green: #1b4542;
    --color-main: var(--green);
    --color-sub: var(--light-green);
    --color-accent: var(--deep-green);
    --color-text: var(--black);
    --color-text-light: var(--white);
    --color-text-muted: var(--gray);
    --color-text-accent: var(--deep-green);
    --color-bg: var(--white);
    --color-border: var(--gray);
    --color-border-input: var(--black);
    --content-width: 1440px;
    --ease-in-out-quint: cubic-bezier(0.83, 0, 0.17, 1);
    --ease-out-quint: cubic-bezier(0.22, 1, 0.36, 1);
    --ease-out-cubic: cubic-bezier(0.33, 1, 0.68, 1);
  }

  html,
  body {
    padding: 0;
    margin: 0;
    overflow-wrap: break-word;
    background-color: var(--color-bg);
    -webkit-font-smoothing: antialiased;
    scroll-behavior: smooth;
  }

  html {
    text-size-adjust: 100%;
  }

  body {
    position: relative;
    font-family: YakuHanMP, 'Montserrat Variable', 'Zen Kaku Gothic New', sans-serif;
    font-weight: 400;
    line-height: 2;
    color: var(--color-text);

    &::before {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      content: '';
      background-image: url('../assets/noise.png');
      background-size: 100px 100px;
      opacity: 0.04;
    }
  }

  .wrapper {
    position: relative;

    @include mq(1801) {
      max-width: var(--content-width);
      margin: 0 auto;

      &::before {
        position: fixed;
        inset: 0;
        max-width: var(--content-width);
        height: 100%;
        margin: auto;
        pointer-events: none;
        content: '';
        border-right: 1px solid #000;
        border-left: 1px solid #000;
      }
    }
  }
</style>

<script>
  import Lenis from 'lenis';
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  const lenis = new Lenis({
    autoRaf: true,
  });

  lenis.on('scroll', ScrollTrigger.update);

  gsap.ticker.add((time) => {
    lenis.raf(time * 1000);
  });

  gsap.ticker.lagSmoothing(0);
</script>
